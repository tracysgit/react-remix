{
  "version": 3,
  "sources": ["../../../app/components/CardDeck.tsx", "../../../app/routes/work._index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/CardDeck.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/CardDeck.tsx\");\n  import.meta.hot.lastModified = \"1701626552721.3787\";\n}\n// REMIX HMR END\n\nimport { Link } from \"@remix-run/react\";\nimport parse from 'html-react-parser';\nfunction CardDeck({\n  pieces\n}) {\n  return <section aria-label=\"Portfolio of Artwork\">\n      {pieces.length ? <ul className=\"image-container--columns\">\n        {pieces.map(piece => <li key={piece.id} id={`piece_${piece.id}`}>\n            <Link to={`/work/${piece.id}`} className=\"image-card\">\n              <figure>\n                {/* <img src={`../images/${piece.imageFiles.card}.jpg`} alt=\"\" /> */}\n                <picture>\n                  <source srcSet={`../images/${piece.imageFiles.card}.webp`} alt=\"\" type=\"image/webp\" />\n                  <img src={`../images/${piece.imageFiles.card}.jpg`} alt=\"\" />\n                </picture>\n                <figcaption>{parse(`${piece.name}`)}</figcaption>\n              </figure>\n            </Link>\n          </li>)}\n      </ul> : <p className=\"message--error\">No artwork is available for display.</p>}\n    </section>;\n}\n_c = CardDeck;\nexport default CardDeck;\nvar _c;\n$RefreshReg$(_c, \"CardDeck\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/work._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/work._index.tsx\");\n  import.meta.hot.lastModified = \"1701659892328.281\";\n}\n// REMIX HMR END\n\nimport CardDeck from \"../components/CardDeck\";\nimport data from \"../assets/data/data.json\";\nconst PIECES = data.PIECES;\nexport const meta = () => {\n  return [{\n    name: \"description\",\n    content: \"View the body of work by artist Seanne Buoy.\"\n  }, {\n    title: \"Seanne Buoy | Work\"\n  }];\n};\nexport default function WorkIndexRoute() {\n  return <CardDeck pieces={PIECES} />;\n}\n_c = WorkIndexRoute;\nvar _c;\n$RefreshReg$(_c, \"WorkIndexRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAgCkB;AA/BlB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6B;AAC7B,cAAY,IAAI,eAAe;AACjC;AAKA,SAAS,SAAS;AAAA,EAChB;AACF,GAAG;AACD,SAAO,mDAAC,aAAQ,cAAW,wBACtB,iBAAO,SAAS,mDAAC,QAAG,WAAU,4BAC5B,iBAAO,IAAI,WAAS,mDAAC,QAAkB,IAAI,SAAS,MAAM,MACvD,6DAAC,QAAK,IAAI,SAAS,MAAM,MAAM,WAAU,cACvC,6DAAC,YAEC;AAAA,uDAAC,aACC;AAAA,yDAAC,YAAO,QAAQ,aAAa,MAAM,WAAW,aAAa,KAAI,IAAG,MAAK,gBAAvE;AAAA;AAAA;AAAA;AAAA,aAAoF;AAAA,MACpF,mDAAC,SAAI,KAAK,aAAa,MAAM,WAAW,YAAY,KAAI,MAAxD;AAAA;AAAA;AAAA;AAAA,aAA2D;AAAA,SAF7D;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACA,mDAAC,gBAAY,sBAAM,GAAG,MAAM,MAAM,KAAlC;AAAA;AAAA;AAAA;AAAA,WAAoC;AAAA,OANtC;AAAA;AAAA;AAAA;AAAA,SAOA,KARF;AAAA;AAAA;AAAA;AAAA,SASA,KAV0B,MAAM,IAAf;AAAA;AAAA;AAAA;AAAA,SAWnB,CAAK,KAZQ;AAAA;AAAA;AAAA;AAAA,SAajB,IAAQ,mDAAC,OAAE,WAAU,kBAAiB,oDAA9B;AAAA;AAAA;AAAA;AAAA,SAAkE,KAdvE;AAAA;AAAA;AAAA;AAAA,SAeL;AACJ;AACA,KAAK;AACL,IAAO,mBAAQ;AACf,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;;;AChBb,IAAAA,0BAAA;AA/BT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iCAAmC,EAAE;AAAA,EAC9E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA4B;AAC5B,cAAY,IAAI,eAAe;AACjC;AAKA,IAAM,SAAS,aAAK;AACb,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EACX,GAAG;AAAA,IACD,OAAO;AAAA,EACT,CAAC;AACH;AACe,SAAR,iBAAkC;AACvC,SAAO,oDAAC,oBAAS,QAAQ,UAAlB;AAAA;AAAA;AAAA;AAAA,SAA0B;AACnC;AACAC,MAAK;AACL,IAAIA;AACJ,aAAaA,KAAI,gBAAgB;AAEjC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_jsx_dev_runtime", "_c"]
}
